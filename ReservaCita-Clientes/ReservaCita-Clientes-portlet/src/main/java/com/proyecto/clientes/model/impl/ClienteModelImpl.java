package com.proyecto.clientes.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.proyecto.clientes.model.Cliente;
import com.proyecto.clientes.model.ClienteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Cliente service. Represents a row in the &quot;RES_CLIENTE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.proyecto.clientes.model.ClienteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClienteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClienteImpl
 * @see com.proyecto.clientes.model.Cliente
 * @see com.proyecto.clientes.model.ClienteModel
 * @generated
 */
public class ClienteModelImpl extends BaseModelImpl<Cliente>
    implements ClienteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a cliente model instance should use the {@link com.proyecto.clientes.model.Cliente} interface instead.
     */
    public static final String TABLE_NAME = "RES_CLIENTE";
    public static final Object[][] TABLE_COLUMNS = {
            { "ID_CLIENTE", Types.BIGINT },
            { "B_ACTIVADO", Types.INTEGER },
            { "B_DENEGADO", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table RES_CLIENTE (ID_CLIENTE LONG not null primary key,B_ACTIVADO INTEGER,B_DENEGADO INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table RES_CLIENTE";
    public static final String ORDER_BY_JPQL = " ORDER BY cliente.idCliente ASC";
    public static final String ORDER_BY_SQL = " ORDER BY RES_CLIENTE.ID_CLIENTE ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.proyecto.clientes.model.Cliente"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.proyecto.clientes.model.Cliente"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.proyecto.clientes.model.Cliente"),
            true);
    public static long ACTIVADO_COLUMN_BITMASK = 1L;
    public static long DENEGADO_COLUMN_BITMASK = 2L;
    public static long IDCLIENTE_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.proyecto.clientes.model.Cliente"));
    private static ClassLoader _classLoader = Cliente.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Cliente.class
        };
    private long _idCliente;
    private long _originalIdCliente;
    private boolean _setOriginalIdCliente;
    private int _activado;
    private int _originalActivado;
    private boolean _setOriginalActivado;
    private int _denegado;
    private int _originalDenegado;
    private boolean _setOriginalDenegado;
    private long _columnBitmask;
    private Cliente _escapedModel;

    public ClienteModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _idCliente;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIdCliente(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idCliente;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Cliente.class;
    }

    @Override
    public String getModelClassName() {
        return Cliente.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idCliente", getIdCliente());
        attributes.put("activado", getActivado());
        attributes.put("denegado", getDenegado());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idCliente = (Long) attributes.get("idCliente");

        if (idCliente != null) {
            setIdCliente(idCliente);
        }

        Integer activado = (Integer) attributes.get("activado");

        if (activado != null) {
            setActivado(activado);
        }

        Integer denegado = (Integer) attributes.get("denegado");

        if (denegado != null) {
            setDenegado(denegado);
        }
    }

    @Override
    public long getIdCliente() {
        return _idCliente;
    }

    @Override
    public void setIdCliente(long idCliente) {
        _columnBitmask |= IDCLIENTE_COLUMN_BITMASK;

        if (!_setOriginalIdCliente) {
            _setOriginalIdCliente = true;

            _originalIdCliente = _idCliente;
        }

        _idCliente = idCliente;
    }

    public long getOriginalIdCliente() {
        return _originalIdCliente;
    }

    @Override
    public int getActivado() {
        return _activado;
    }

    @Override
    public void setActivado(int activado) {
        _columnBitmask |= ACTIVADO_COLUMN_BITMASK;

        if (!_setOriginalActivado) {
            _setOriginalActivado = true;

            _originalActivado = _activado;
        }

        _activado = activado;
    }

    public int getOriginalActivado() {
        return _originalActivado;
    }

    @Override
    public int getDenegado() {
        return _denegado;
    }

    @Override
    public void setDenegado(int denegado) {
        _columnBitmask |= DENEGADO_COLUMN_BITMASK;

        if (!_setOriginalDenegado) {
            _setOriginalDenegado = true;

            _originalDenegado = _denegado;
        }

        _denegado = denegado;
    }

    public int getOriginalDenegado() {
        return _originalDenegado;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Cliente.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Cliente toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Cliente) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ClienteImpl clienteImpl = new ClienteImpl();

        clienteImpl.setIdCliente(getIdCliente());
        clienteImpl.setActivado(getActivado());
        clienteImpl.setDenegado(getDenegado());

        clienteImpl.resetOriginalValues();

        return clienteImpl;
    }

    @Override
    public int compareTo(Cliente cliente) {
        long primaryKey = cliente.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Cliente)) {
            return false;
        }

        Cliente cliente = (Cliente) obj;

        long primaryKey = cliente.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ClienteModelImpl clienteModelImpl = this;

        clienteModelImpl._originalIdCliente = clienteModelImpl._idCliente;

        clienteModelImpl._setOriginalIdCliente = false;

        clienteModelImpl._originalActivado = clienteModelImpl._activado;

        clienteModelImpl._setOriginalActivado = false;

        clienteModelImpl._originalDenegado = clienteModelImpl._denegado;

        clienteModelImpl._setOriginalDenegado = false;

        clienteModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Cliente> toCacheModel() {
        ClienteCacheModel clienteCacheModel = new ClienteCacheModel();

        clienteCacheModel.idCliente = getIdCliente();

        clienteCacheModel.activado = getActivado();

        clienteCacheModel.denegado = getDenegado();

        return clienteCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{idCliente=");
        sb.append(getIdCliente());
        sb.append(", activado=");
        sb.append(getActivado());
        sb.append(", denegado=");
        sb.append(getDenegado());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.proyecto.clientes.model.Cliente");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idCliente</column-name><column-value><![CDATA[");
        sb.append(getIdCliente());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>activado</column-name><column-value><![CDATA[");
        sb.append(getActivado());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>denegado</column-name><column-value><![CDATA[");
        sb.append(getDenegado());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
