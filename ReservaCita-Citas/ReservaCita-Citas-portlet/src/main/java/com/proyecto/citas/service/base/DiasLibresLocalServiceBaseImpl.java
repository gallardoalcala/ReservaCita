package com.proyecto.citas.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.proyecto.citas.model.DiasLibres;
import com.proyecto.citas.service.DiasLibresLocalService;
import com.proyecto.citas.service.persistence.CitaPersistence;
import com.proyecto.citas.service.persistence.DiasFestivosPersistence;
import com.proyecto.citas.service.persistence.DiasLibresPersistence;
import com.proyecto.citas.service.persistence.HorarioTrabajoPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dias libres local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.proyecto.citas.service.impl.DiasLibresLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.proyecto.citas.service.impl.DiasLibresLocalServiceImpl
 * @see com.proyecto.citas.service.DiasLibresLocalServiceUtil
 * @generated
 */
public abstract class DiasLibresLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements DiasLibresLocalService,
        IdentifiableBean {
    @BeanReference(type = com.proyecto.citas.service.CitaLocalService.class)
    protected com.proyecto.citas.service.CitaLocalService citaLocalService;
    @BeanReference(type = CitaPersistence.class)
    protected CitaPersistence citaPersistence;
    @BeanReference(type = com.proyecto.citas.service.DiasFestivosLocalService.class)
    protected com.proyecto.citas.service.DiasFestivosLocalService diasFestivosLocalService;
    @BeanReference(type = DiasFestivosPersistence.class)
    protected DiasFestivosPersistence diasFestivosPersistence;
    @BeanReference(type = com.proyecto.citas.service.DiasLibresLocalService.class)
    protected com.proyecto.citas.service.DiasLibresLocalService diasLibresLocalService;
    @BeanReference(type = DiasLibresPersistence.class)
    protected DiasLibresPersistence diasLibresPersistence;
    @BeanReference(type = com.proyecto.citas.service.HorarioTrabajoLocalService.class)
    protected com.proyecto.citas.service.HorarioTrabajoLocalService horarioTrabajoLocalService;
    @BeanReference(type = HorarioTrabajoPersistence.class)
    protected HorarioTrabajoPersistence horarioTrabajoPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private DiasLibresLocalServiceClpInvoker _clpInvoker = new DiasLibresLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.proyecto.citas.service.DiasLibresLocalServiceUtil} to access the dias libres local service.
     */

    /**
     * Adds the dias libres to the database. Also notifies the appropriate model listeners.
     *
     * @param diasLibres the dias libres
     * @return the dias libres that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public DiasLibres addDiasLibres(DiasLibres diasLibres)
        throws SystemException {
        diasLibres.setNew(true);

        return diasLibresPersistence.update(diasLibres);
    }

    /**
     * Creates a new dias libres with the primary key. Does not add the dias libres to the database.
     *
     * @param dia the primary key for the new dias libres
     * @return the new dias libres
     */
    @Override
    public DiasLibres createDiasLibres(String dia) {
        return diasLibresPersistence.create(dia);
    }

    /**
     * Deletes the dias libres with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param dia the primary key of the dias libres
     * @return the dias libres that was removed
     * @throws PortalException if a dias libres with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public DiasLibres deleteDiasLibres(String dia)
        throws PortalException, SystemException {
        return diasLibresPersistence.remove(dia);
    }

    /**
     * Deletes the dias libres from the database. Also notifies the appropriate model listeners.
     *
     * @param diasLibres the dias libres
     * @return the dias libres that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public DiasLibres deleteDiasLibres(DiasLibres diasLibres)
        throws SystemException {
        return diasLibresPersistence.remove(diasLibres);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(DiasLibres.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return diasLibresPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.proyecto.citas.model.impl.DiasLibresModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return diasLibresPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.proyecto.citas.model.impl.DiasLibresModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return diasLibresPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return diasLibresPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return diasLibresPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public DiasLibres fetchDiasLibres(String dia) throws SystemException {
        return diasLibresPersistence.fetchByPrimaryKey(dia);
    }

    /**
     * Returns the dias libres with the primary key.
     *
     * @param dia the primary key of the dias libres
     * @return the dias libres
     * @throws PortalException if a dias libres with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public DiasLibres getDiasLibres(String dia)
        throws PortalException, SystemException {
        return diasLibresPersistence.findByPrimaryKey(dia);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return diasLibresPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the dias libreses.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.proyecto.citas.model.impl.DiasLibresModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of dias libreses
     * @param end the upper bound of the range of dias libreses (not inclusive)
     * @return the range of dias libreses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<DiasLibres> getDiasLibreses(int start, int end)
        throws SystemException {
        return diasLibresPersistence.findAll(start, end);
    }

    /**
     * Returns the number of dias libreses.
     *
     * @return the number of dias libreses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getDiasLibresesCount() throws SystemException {
        return diasLibresPersistence.countAll();
    }

    /**
     * Updates the dias libres in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param diasLibres the dias libres
     * @return the dias libres that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public DiasLibres updateDiasLibres(DiasLibres diasLibres)
        throws SystemException {
        return diasLibresPersistence.update(diasLibres);
    }

    /**
     * Returns the cita local service.
     *
     * @return the cita local service
     */
    public com.proyecto.citas.service.CitaLocalService getCitaLocalService() {
        return citaLocalService;
    }

    /**
     * Sets the cita local service.
     *
     * @param citaLocalService the cita local service
     */
    public void setCitaLocalService(
        com.proyecto.citas.service.CitaLocalService citaLocalService) {
        this.citaLocalService = citaLocalService;
    }

    /**
     * Returns the cita persistence.
     *
     * @return the cita persistence
     */
    public CitaPersistence getCitaPersistence() {
        return citaPersistence;
    }

    /**
     * Sets the cita persistence.
     *
     * @param citaPersistence the cita persistence
     */
    public void setCitaPersistence(CitaPersistence citaPersistence) {
        this.citaPersistence = citaPersistence;
    }

    /**
     * Returns the dias festivos local service.
     *
     * @return the dias festivos local service
     */
    public com.proyecto.citas.service.DiasFestivosLocalService getDiasFestivosLocalService() {
        return diasFestivosLocalService;
    }

    /**
     * Sets the dias festivos local service.
     *
     * @param diasFestivosLocalService the dias festivos local service
     */
    public void setDiasFestivosLocalService(
        com.proyecto.citas.service.DiasFestivosLocalService diasFestivosLocalService) {
        this.diasFestivosLocalService = diasFestivosLocalService;
    }

    /**
     * Returns the dias festivos persistence.
     *
     * @return the dias festivos persistence
     */
    public DiasFestivosPersistence getDiasFestivosPersistence() {
        return diasFestivosPersistence;
    }

    /**
     * Sets the dias festivos persistence.
     *
     * @param diasFestivosPersistence the dias festivos persistence
     */
    public void setDiasFestivosPersistence(
        DiasFestivosPersistence diasFestivosPersistence) {
        this.diasFestivosPersistence = diasFestivosPersistence;
    }

    /**
     * Returns the dias libres local service.
     *
     * @return the dias libres local service
     */
    public com.proyecto.citas.service.DiasLibresLocalService getDiasLibresLocalService() {
        return diasLibresLocalService;
    }

    /**
     * Sets the dias libres local service.
     *
     * @param diasLibresLocalService the dias libres local service
     */
    public void setDiasLibresLocalService(
        com.proyecto.citas.service.DiasLibresLocalService diasLibresLocalService) {
        this.diasLibresLocalService = diasLibresLocalService;
    }

    /**
     * Returns the dias libres persistence.
     *
     * @return the dias libres persistence
     */
    public DiasLibresPersistence getDiasLibresPersistence() {
        return diasLibresPersistence;
    }

    /**
     * Sets the dias libres persistence.
     *
     * @param diasLibresPersistence the dias libres persistence
     */
    public void setDiasLibresPersistence(
        DiasLibresPersistence diasLibresPersistence) {
        this.diasLibresPersistence = diasLibresPersistence;
    }

    /**
     * Returns the horario trabajo local service.
     *
     * @return the horario trabajo local service
     */
    public com.proyecto.citas.service.HorarioTrabajoLocalService getHorarioTrabajoLocalService() {
        return horarioTrabajoLocalService;
    }

    /**
     * Sets the horario trabajo local service.
     *
     * @param horarioTrabajoLocalService the horario trabajo local service
     */
    public void setHorarioTrabajoLocalService(
        com.proyecto.citas.service.HorarioTrabajoLocalService horarioTrabajoLocalService) {
        this.horarioTrabajoLocalService = horarioTrabajoLocalService;
    }

    /**
     * Returns the horario trabajo persistence.
     *
     * @return the horario trabajo persistence
     */
    public HorarioTrabajoPersistence getHorarioTrabajoPersistence() {
        return horarioTrabajoPersistence;
    }

    /**
     * Sets the horario trabajo persistence.
     *
     * @param horarioTrabajoPersistence the horario trabajo persistence
     */
    public void setHorarioTrabajoPersistence(
        HorarioTrabajoPersistence horarioTrabajoPersistence) {
        this.horarioTrabajoPersistence = horarioTrabajoPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.proyecto.citas.model.DiasLibres",
            diasLibresLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.proyecto.citas.model.DiasLibres");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return DiasLibres.class;
    }

    protected String getModelClassName() {
        return DiasLibres.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = diasLibresPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
