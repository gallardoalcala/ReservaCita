package com.proyecto.citas.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.proyecto.citas.model.DiasLibres;
import com.proyecto.citas.model.DiasLibresModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DiasLibres service. Represents a row in the &quot;RES_DIAS_LIBRES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.proyecto.citas.model.DiasLibresModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DiasLibresImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DiasLibresImpl
 * @see com.proyecto.citas.model.DiasLibres
 * @see com.proyecto.citas.model.DiasLibresModel
 * @generated
 */
public class DiasLibresModelImpl extends BaseModelImpl<DiasLibres>
    implements DiasLibresModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a dias libres model instance should use the {@link com.proyecto.citas.model.DiasLibres} interface instead.
     */
    public static final String TABLE_NAME = "RES_DIAS_LIBRES";
    public static final Object[][] TABLE_COLUMNS = {
            { "T_DIA", Types.VARCHAR },
            { "B_LIBRE", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table RES_DIAS_LIBRES (T_DIA VARCHAR(75) not null primary key,B_LIBRE INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table RES_DIAS_LIBRES";
    public static final String ORDER_BY_JPQL = " ORDER BY diasLibres.dia ASC";
    public static final String ORDER_BY_SQL = " ORDER BY RES_DIAS_LIBRES.T_DIA ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.proyecto.citas.model.DiasLibres"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.proyecto.citas.model.DiasLibres"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.proyecto.citas.model.DiasLibres"));
    private static ClassLoader _classLoader = DiasLibres.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DiasLibres.class
        };
    private String _dia;
    private int _libre;
    private DiasLibres _escapedModel;

    public DiasLibresModelImpl() {
    }

    @Override
    public String getPrimaryKey() {
        return _dia;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setDia(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _dia;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return DiasLibres.class;
    }

    @Override
    public String getModelClassName() {
        return DiasLibres.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("dia", getDia());
        attributes.put("libre", getLibre());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String dia = (String) attributes.get("dia");

        if (dia != null) {
            setDia(dia);
        }

        Integer libre = (Integer) attributes.get("libre");

        if (libre != null) {
            setLibre(libre);
        }
    }

    @Override
    public String getDia() {
        if (_dia == null) {
            return StringPool.BLANK;
        } else {
            return _dia;
        }
    }

    @Override
    public void setDia(String dia) {
        _dia = dia;
    }

    @Override
    public int getLibre() {
        return _libre;
    }

    @Override
    public void setLibre(int libre) {
        _libre = libre;
    }

    @Override
    public DiasLibres toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DiasLibres) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DiasLibresImpl diasLibresImpl = new DiasLibresImpl();

        diasLibresImpl.setDia(getDia());
        diasLibresImpl.setLibre(getLibre());

        diasLibresImpl.resetOriginalValues();

        return diasLibresImpl;
    }

    @Override
    public int compareTo(DiasLibres diasLibres) {
        String primaryKey = diasLibres.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DiasLibres)) {
            return false;
        }

        DiasLibres diasLibres = (DiasLibres) obj;

        String primaryKey = diasLibres.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<DiasLibres> toCacheModel() {
        DiasLibresCacheModel diasLibresCacheModel = new DiasLibresCacheModel();

        diasLibresCacheModel.dia = getDia();

        String dia = diasLibresCacheModel.dia;

        if ((dia != null) && (dia.length() == 0)) {
            diasLibresCacheModel.dia = null;
        }

        diasLibresCacheModel.libre = getLibre();

        return diasLibresCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{dia=");
        sb.append(getDia());
        sb.append(", libre=");
        sb.append(getLibre());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.proyecto.citas.model.DiasLibres");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>dia</column-name><column-value><![CDATA[");
        sb.append(getDia());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>libre</column-name><column-value><![CDATA[");
        sb.append(getLibre());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
